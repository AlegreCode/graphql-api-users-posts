package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/alegrecode/graphql-api-users-posts/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, user model.InputUser) (*model.User, error) {
	newUser := model.User{
		Name:     user.Name,
		Lastname: user.Lastname,
	}

	r.DB.Create(&newUser)
	return &newUser, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, user model.InputUser) (*model.User, error) {
	updatedUser := model.User{
		ID:       id,
		Name:     user.Name,
		Lastname: user.Lastname,
	}

	r.DB.Save(&updatedUser)
	return &updatedUser, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (*model.User, error) {
	deletedUser := model.User{}
	r.DB.First(&deletedUser, id)
	r.DB.Delete(&deletedUser)
	return &deletedUser, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, post model.InputPost) (*model.Post, error) {
	newPost := model.Post{
		Title:  post.Title,
		Text:   post.Text,
		UserID: post.UserID,
	}
	r.DB.Create(&newPost)
	return &newPost, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id int, post model.InputPost) (*model.Post, error) {
	updatedPost := model.Post{
		ID:     id,
		Title:  post.Title,
		Text:   post.Text,
		UserID: post.UserID,
	}

	r.DB.Save(&updatedPost)
	return &updatedPost, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id int) (*model.Post, error) {
	deletedPost := model.Post{}
	r.DB.First(&deletedPost, id)
	r.DB.Delete(&deletedPost)
	return &deletedPost, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	r.DB.Preload("Posts").Find(&users)
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) (*model.User, error) {
	user := model.User{}
	r.DB.Preload("Posts").First(&user, id)
	return &user, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	var posts []*model.Post
	r.DB.Preload("User").Find(&posts)
	return posts, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id int) (*model.Post, error) {
	post := model.Post{}
	r.DB.Preload("User").First(&post, id)
	return &post, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
